'''
This function will open a zipfile of a redcap instrument and run 
a find and replace on all the files in it given a key:value dictionary and a json file. 

It then saves the new instrument files into a new zipfile.

'''

from sys import modules
from os import mkdir, path
from datetime import datetime
from glob import glob
from zipfile import ZipFile

# Glorified find and replace on files in zip archive

# Inputs: plan.json, generated by makePlan.py

def applyPlan(plan, zipfile):

    # accommodates all the types of files found in a redcap project
    for file in projectfiles:
        date = datetime.now().strftime("%Y%m%d")
        instrumentfolder = zipfile.split('.')[0]    # instruments are exported from redcap as a zip archive
        
        print(f"\nCreating directory for modified instrument: {instrumentfolder}")
        try: mkdir(instrumentfolder)    # location for output redcap files
        except: print(f"Writing into existing directory.")
        
        newfile = path.join('.',zipfile.split('.')[0], file.split('/')[-1])
        
        # open file and run find and replace line by line, saving to new file
        print(f"\nCopying modified file contents from {file} to {newfile}...")
        with open(file) as infile, open(newfile, 'w') as outfile:
            for line in infile:
                for src, target in plan.items():
                    line = line.replace(src, target)
                outfile.write(line)
                    
    # Rezip files matching date
    instruments = os.path.join(instrumentfolder, '*')   #  /input/instrument/*
    newzipfiles = glob.glob(instruments)    # ls /input/instrument/*
    print('New zip files: ', newzipfiles)
    newzip = instrumentfolder + date  + '_update.zip'
    print(f"\nZipping new instrument as {newzip}\n")
    zf = ZipFile(newzip, mode='w')

    # finally zip all the files
    for file in newzipfiles:
        fn = file.split('/')[-1]
        print(f"\nZipping file {file}")
        zf.write(file,arcname=fn)
    

modules[__name__] = applyPlan